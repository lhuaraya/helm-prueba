{{ if or (eq .Values.profile "dev") (eq .Values.profile "test") }}
apiVersion: v1
kind: Service
metadata:
  name: publico-back
  namespace: {{ .Release.Namespace }}
  labels:
    app: publico-back
spec:
    selector:
      app: publico-back
    ports:
      - port: {{ .Values.publicoback.port }}
        targetPort: 8080

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: publico-back
  namespace: {{ .Release.Namespace }}
  labels:
    app: publico-back
spec:
  replicas: {{ .Values.replicas }}
  selector:
    matchLabels:
      app: publico-back
  template:
    metadata:
      labels:
        app: publico-back
      annotations:
        rollme: {{ randAlphaNum 5 | quote }}
        
    spec:
      hostname: publico-back
      #Esta linea balancea los pods
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - publico-back
            topologyKey: "kubernetes.io/hostname"      
      containers:
      {{ if (eq .Values.profile "dev") }}
      - image: {{ .Values.docker.ns }}/proyectos-publicos-back:dev
      {{ else if (eq .Values.profile "test") }}
      - image: {{ .Values.docker.ns }}/proyectos-publicos-back:test
      {{ end }}
        imagePullPolicy: Always
        name: publico-back
        ports:
        - containerPort: 3000

        resources:
          requests:
            cpu: 1m
            memory: 100Mi
#          limits:
#            cpu: 5m
#            memory: 520Mi

        env:
          - name: TZ
            value: "Europe/Madrid"
         # - name: PROFILE
         # {{ if (eq .Values.profile "dev") }}
         #   value: {{ .Values.dev.profile }}
         # {{ else if (eq .Values.profile "test") }}
         #   value: {{ .Values.test.profile }}
         # {{ end }}
          - name: PORT
            value: "3000"
          - name: DB_HOST 
            value: publico-db
          - name: DB_NAME 
            value: proyectos_publicos
          - name: DB_PORT
            value: {{ quote .Values.publicodb.port }}
          - name: SECRET
            value: proyecto_publicos_super_secret
          - name: DB_USER
            valueFrom:
              secretKeyRef:
                name: publico-db-token
                key: username            
          - name: DB_PASSWORD
            valueFrom:
              secretKeyRef:
                name: publico-db-token
                key: password
          #- name: EMAIL_HOST
           # value: smtp.eu.mailgun.org
          #- name: EMAIL_PORT
           # value: "587"
          #- name: EMAIL_USER
          #  valueFrom:
          #    secretKeyRef:
        #        name: hemera-mail-service
        #        key: username
        #  - name: EMAIL_PASS
        #    valueFrom:
        #      secretKeyRef:
        # #       name: hemera-mail-service
        #        key: password
        # - name: EMAIL-STARTTLS-REQUIRED
        #    value: "true"
        #  - name: EMAIL-STARTTLS
        #    value: "true"            
          #- name: URL_BASE
          #{{ if (eq .Values.profile "dev") }}
          #  value: https://{{ .Values.dev.ingress.host }}
          #{{ else if (eq .Values.profile "test") }}
          #  value: https://{{ .Values.test.ingress.host }}
          #{{ end }}

        volumeMounts:
          - mountPath: "/etc/timezone"
            name: timezone
            publicodOnly: true

      volumes:

      - name: timezone
        hostPath:
          path: /etc/timezone
          type: File
      
      imagePullSecrets:
      - name: publico-docker-registry
{{ end }}
